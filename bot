app.py
import os, re, requests
from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import MessageEvent, TextMessage, TextSendMessage

app = Flask(__name__)

CHANNEL_ACCESS_TOKEN = os.getenv("LINE_CHANNEL_ACCESS_TOKEN")
CHANNEL_SECRET = os.getenv("LINE_CHANNEL_SECRET")

line_bot_api = LineBotApi(CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(CHANNEL_SECRET)

CJK_RE = re.compile(r'[\u4e00-\u9fff\u3040-\u30ff\uac00-\ud7af]')

def translate_mymemory(q, src, tgt):
    url = "https://api.mymemory.translated.net/get"
    params = {"q": q, "langpair": f"{src}|{tgt}"}
    r = requests.get(url, params=params, timeout=10)
    r.raise_for_status()
    data = r.json()
    return data.get("responseData", {}).get("translatedText", "")

@app.route("/health", methods=["GET"])
def health():
    return "ok", 200

@app.route("/callback", methods=["POST"])
def callback():
    signature = request.headers.get("X-Line-Signature", "")
    body = request.get_data(as_text=True)
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return "OK"

@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    text = event.message.text.strip()
    if not text:
        return
    if CJK_RE.search(text):
        src, tgt = "zh-TW", "id"
        direction = "中 → 印尼"
    else:
        src, tgt = "id", "zh-TW"
        direction = "印尼 → 中"
    try:
        translated = translate_mymemory(text, src, tgt)
        reply = f"〔{direction}〕\n{translated}"
    except Exception:
        reply = "翻譯服務暫時無法使用，請稍後再試 🙏"
    line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply))

if __name__ == "__main__":
    port = int(os.getenv("PORT", 8000))
    app.run(host="0.0.0.0", port=port)

